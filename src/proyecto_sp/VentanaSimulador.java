/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto_sp;

import javax.swing.SwingUtilities;
/**
 *
 * @author Alessandro
 */
public class VentanaSimulador extends javax.swing.JFrame implements Runnable {

    private Cola colaListos;
    private Cola colaTerminados;
    private int cicloGlobal;
    private PCB procesoEnCpu;
    
    public VentanaSimulador() {
    initComponents();
    
    // --- AÑADE ESTAS LÍNEAS ---
    this.colaListos = new Cola();
    this.colaTerminados = new Cola();
    this.cicloGlobal = 0;
    this.procesoEnCpu = null;
    // -------------------------

    // Ahora el resto de tu código funcionará correctamente
    Proceso p1 = new Proceso("Navegador Web", 10);
    Proceso p2 = new Proceso("Editor de Texto", 7);
    Proceso p3 = new Proceso("Música", 12);

    // Creamos su PCB (Process Control Block)
    PCB pcb1 = new PCB(p1);
    PCB pcb2 = new PCB(p2);
    PCB pcb3 = new PCB(p3);

    // Los procesos "llegan" al sistema y se encolan en la lista de listos.
    pcb1.setEstado(PCB.EstadoProceso.LISTO);
    colaListos.encolar(pcb1);
    pcb2.setEstado(PCB.EstadoProceso.LISTO);
    colaListos.encolar(pcb2);
    pcb3.setEstado(PCB.EstadoProceso.LISTO);
    colaListos.encolar(pcb3);
}
    
private void actualizarGUI() {
    // Actualiza el ciclo actual
    lblCicloActual.setText(String.valueOf(cicloGlobal));

    // Actualiza la información del proceso en CPU
    if (procesoEnCpu != null) {
        lblProcesoCPU.setText(procesoEnCpu.getProcesoInfo().getNombre() + " (ID: " + procesoEnCpu.getId() + ")");
        lblProgramCounter.setText(String.valueOf(procesoEnCpu.getProgramCounter()));
    } else {
        lblProcesoCPU.setText("N/A");
        lblProgramCounter.setText("0");
    }

    // Actualiza el JTextArea de la cola de listos
    txtColaListos.setText(colaListos.toString());
    txtTerminados.setText(colaTerminados.toString());

    // Aquí en el futuro actualizarás las otras colas (bloqueados y terminados)
    // txtColaBloqueados.setText(...);
    // txtTerminados.setText(...);
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtColaListos = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtColaBloqueados = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtTerminados = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblProgramCounter = new javax.swing.JLabel();
        lblProcesoCPU = new javax.swing.JLabel();
        lblCicloActual = new javax.swing.JLabel();
        btnIniciar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtColaListos.setColumns(20);
        txtColaListos.setRows(5);
        jScrollPane1.setViewportView(txtColaListos);

        txtColaBloqueados.setColumns(20);
        txtColaBloqueados.setRows(5);
        jScrollPane2.setViewportView(txtColaBloqueados);

        txtTerminados.setColumns(20);
        txtTerminados.setRows(5);
        jScrollPane3.setViewportView(txtTerminados);

        jLabel1.setText("   Cola de Listos");

        jLabel2.setText("   Cola de Bloqueados");

        jLabel3.setText("    Procesos Terminados");

        jLabel4.setText("Proceso en CPU:");

        jLabel5.setText("Program Counter:");

        jLabel6.setText("Ciclo Actual:");

        lblProgramCounter.setText("0");

        lblProcesoCPU.setText("N/A");

        lblCicloActual.setText("0");

        btnIniciar.setText("Iniciar Simulación");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(131, 131, 131)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnIniciar)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblCicloActual, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblProgramCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblProcesoCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblProcesoCPU))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblProgramCounter))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblCicloActual))
                .addGap(26, 26, 26)
                .addComponent(btnIniciar)
                .addContainerGap(224, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        btnIniciar.setEnabled(false);
        Thread hiloSimulacion = new Thread(this);
        hiloSimulacion.start();
    }//GEN-LAST:event_btnIniciarActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCicloActual;
    private javax.swing.JLabel lblProcesoCPU;
    private javax.swing.JLabel lblProgramCounter;
    private javax.swing.JTextArea txtColaBloqueados;
    private javax.swing.JTextArea txtColaListos;
    private javax.swing.JTextArea txtTerminados;
    // End of variables declaration//GEN-END:variables

   @Override
public void run() {
    while (procesoEnCpu != null || !colaListos.estaVacia()) {
        if (procesoEnCpu == null) {
            procesoEnCpu = colaListos.desencolar();
            if (procesoEnCpu != null) {
                procesoEnCpu.setEstado(PCB.EstadoProceso.EJECUCION);
            }
        }

        cicloGlobal++;

        if (procesoEnCpu != null) {
            procesoEnCpu.setProgramCounter(procesoEnCpu.getProgramCounter() + 1);
            procesoEnCpu.setMemoryAddressRegister(procesoEnCpu.getProgramCounter());

            if (procesoEnCpu.getProgramCounter() >= procesoEnCpu.getProcesoInfo().getNumeroInstrucciones()) {
                procesoEnCpu.setEstado(PCB.EstadoProceso.TERMINADO);
                colaTerminados.encolar(procesoEnCpu);
                procesoEnCpu = null;
            }
        }

        SwingUtilities.invokeLater(this::actualizarGUI);

        try {
            Thread.sleep(500);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    System.out.println("--- Simulación Finalizada ---");
}
}
